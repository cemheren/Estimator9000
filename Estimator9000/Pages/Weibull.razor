@page "/Weibull"
@using System.ComponentModel
@using Newtonsoft.Json;
@using Estimator9000;
@inject NavigationManager NavManager


<PageTitle>Weibull</PageTitle>

<div class="alert alert-primary">
    How to use: Add all the variables we know in the system one by one.
    K: is an indicator of how sharp the curve climbs for Length. Usually a value like 1 will make sense. But some tasks will have a sharper cdf curve to finish.
    Length: Expected duration of the task. 
    Shift: Number of days this task needs as a buffer to start from a predecessor. 
    (mm/dd/yy)*): Optional, start after day. Indicates the task starts at this time. If null it's set to now.
</div>

<div class="input-group">

    <div>
        <label for="startDate" style="display:inline-block">Start date: </label>
        <input id="startDate" class="form-control mb-10" style="width: 60%; display:inline-block;" @bind="startDate" />
    </div>
    <p></p>
    <div class="input-group-append" style="width: 90%; padding-top: 5px">
        <label for="newItem">New variable (format: name-K[1-3]-Length-shift-(mm/dd/yy)*): </label>
        <input placeholder="no spaces, strict format" id="newItem" class="form-control mb-2" style="width: 30%; display:inline-block" @bind="newItem" />
        <button class="btn btn-outline-primary" type="button" style="display:inline-block" @onclick="AddVariable">Add</button>
    </div>
</div>

<p>All Variables</p>

@foreach (var variable in this.variables)
{
    <div>
        <div class="mb-2" style="font-weight: bold; display:inline-block">
            @variable.Key-@variable.Value.Mean-@variable.Value.variance-@variable.Value.shift-(@variable.Value.startDate.ToString("MM/dd/yy"))
        </div>
        <p style="display:inline-block; padding:10px"> => </p>

        <InputSelect @bind-Value:get="@variable.Value.DependsOn.Name" @bind-Value:set="(val) => SetSelected(variable.Key, val)" class="form-control" style="width: 200px; display:inline-block">
            <option value="null">Select an option</option>

            @foreach (var value in this.variables)
            {
                <option value="@value.Key">@value.Key</option>
            }
        </InputSelect>
    </div>
}


<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="1200" />
</div>


<p></p>
<div style="width: 100%; box-sizing: border-box; display: inline-grid;">
    <button style="left: 0px; float: left; width: 140px;" class="btn btn-outline-secondary" type="button" @onclick="GetUrl">GetUrl</button>
    <a style="float: left; max-width: 300px;" href="@pageUrl">@pageUrl.Substring(0, pageUrl.Length > 100 ? 100 : pageUrl.Length)</a>
</div>

@code {
    private string pageUrl { get; set; } = "";

    private Dictionary<string, Variable> variables = new Dictionary<string, Variable>();

    private string newItem { get; set; } = "";
    private string selectedDependency { get; set; } = "";

    private DateTime startDate { get; set; } = DateTime.Today.ToLocalTime();
    private static Variable startDateVariable { get; set; } = new Variable() { Name = "Start", Mean = 0, variance = 0 };

    protected override void OnInitialized()
    {
        NavManager.LocationChanged += LocationChanged;
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        await Reload();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Reload(); 
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task Reload()
    {
        var uriBuilder = new UriBuilder(NavManager.Uri);
        var parsedQuery = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);

        if (parsedQuery["variables"] != null && this.variables.Count == 0)
        {
            var variablesbase64 = Convert.FromBase64String(parsedQuery["variables"]);
            var variablesJson = System.Text.Encoding.UTF8.GetString(variablesbase64);
            this.variables = JsonConvert.DeserializeObject<Dictionary<string, Variable>>(variablesJson) ?? new Dictionary<string, Variable>();

            if (parsedQuery["startDate"] != null)
            {
                this.startDate = DateTime.Parse(parsedQuery["startDate"]!);
            }

            StateHasChanged();
            await DrawChart();
        }


        // StateHasChanged();
    }

    protected async Task AddVariable()
    {
        if (string.IsNullOrEmpty(this.newItem))
            return;

        var newVariable = Variable.Parse(this.newItem, Weibull.startDateVariable);
        this.variables[newVariable.Name] = newVariable;

        this.newItem = "";

        await DrawChart();
    }

    private string selected = null!;

    async Task SetSelected(string variable, string? value)
    {
        var variableRef = this.variables[variable];
        if (value == null || value == "null")
        {
            variableRef.DependsOn = startDateVariable;
            await DrawChart();
            return;
        }

        var dependency = this.variables[value!];
        if (dependency != null)
        {
            variableRef.DependsOn = dependency;
        }

        await DrawChart();
    }

    protected async Task DrawChart()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        var maxDays = 150;
        var labels = new List<string>();
        var current = this.startDate;
        for (int i = 0; i < maxDays; i++)
        {
            current = current.AddDays(1);
            labels.Add(current.ToShortDateString());
        }

        var datasets = new List<IChartDataset>();

        var color = -1;
        foreach (var variable in this.variables)
        {
            if (variable.Value.variance == 0)
            {
                continue;
            }

            color = (color +1) % 12;

            var rec = variable.Value;
            var sumMean = rec.Mean;
            var sumVariance = rec.variance;
            var offset = (int)rec.startDate.Subtract(this.startDate).TotalDays;
            var cdf = WeibullDistribution.GetCDF(sumMean, sumVariance, maxDays, offset);
            var correlation = 1;

            var i = 0;
            while (rec.DependsOn != null && rec.DependsOn.Name != "Start" && i < 5)
            {
                i++;
                rec = rec.DependsOn;
                offset = (int)rec.startDate.Subtract(this.startDate).TotalDays;
                var localCdf = WeibullDistribution.GetCDF(rec.Mean, rec.variance, maxDays, offset).Shift((int)rec.shift);

                cdf = cdf.MultiplyAndAssign(localCdf);

                // sumMean += rec.Mean;
                // sumVariance += (rec.variance + 2 * correlation * Math.Sqrt(sumVariance) * Math.Sqrt(rec.variance));
            }

            cdf = cdf.Shift((int)variable.Value.shift);

            var dataset = new LineChartDataset
            {
                Label = variable.Key,
                Data = cdf, //GaussianDistribution.GetGaussianCDF(sumMean, sumVariance, maxDays, offset),
                BackgroundColor = colors[color],
                BorderColor = colors[color],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                // PointBackgroundColor = colors[0],
                // PointRadius = 0, // hide points
                // PointHoverRadius = 4,
            };
            datasets.Add(dataset);
        }

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Time", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Probability", Display = true };

        // lineChartOptions.Plugins.Title!.Text = "Operating system";
        // lineChartOptions.Plugins.Title.Display = true;

        if (!lineChartInitialized)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
            lineChartInitialized = true;
        }

        await lineChart.UpdateValuesAsync(chartData);

    }

    private LineChart lineChart = default!;
    private bool lineChartInitialized = false;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected async Task GetUrl()
    {
        var variablesText = JsonConvert.SerializeObject(this.variables);
        var encodedVariables = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(variablesText));

        var uriBuilder = new UriBuilder(NavManager.Uri);
        var parsedQuery = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        parsedQuery["variables"] = encodedVariables;
        parsedQuery["startDate"] = this.startDate.ToString();
        // parsedQuery["type"] = type;
        // parsedQuery["input"] = input;

        uriBuilder.Query = parsedQuery.ToString();

        pageUrl = uriBuilder.ToString();
    }
}
